# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle


name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # github action의 가상환경에 내 프로젝트를 체크아웃하기
      - uses: actions/checkout@v3

      # github action의 가상환경에 빌드를 위해 jdk 17 설치하기
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      
      # gradle로 빌드할 의존성 준비하기
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # gradle로 빌드하여 jar 파일 생성하기
      - name: Execute Gradle build
        run: ./gradlew bootJar

      # 생성된 jar 파일을 도커 작업에서 사용할 수 있도록 캐싱하기

      # 도커 이미지를 만들기 전에 이미지에 대한 정보를 설정하기
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: wonjun-githubaction-image # 이미지 이름 지정
            
      # 도커 이미지를 생성할 의존성 준비하기
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # 생성한 이미지를 도커허브에 올리기 전에 도커허브에 로그인하기
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:  
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 도커 이미지 빌드 전 캐시에 저장된 jar 파일에 접근할 수 있도록 설정하기

      # 도커허브에 생성한 이미지를 푸시하기
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          script_stop: true
          push: true
          tags: jangwonjun/spofo:latest
          
      # github action의 IP가 수시로 바뀌므로
      # 그 ip를 ec2의 인바운드 규칙에서 허용해야 하므로
      # github action의 IP를 얻어온다.
      - name: Get Github Actions IP
        id: ip
        uses: haythem/public-ip@v1.2

      # ec2 IAM 계정의 access key, secret key의 계정정보 등록
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 보안 그룹 ID를 입력하여 github action이 EC2에 접근할 수 있도록 설정
      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: SSH Commands
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.AWS_SSH_HOST }}
          username: ${{ secrets.AWS_SSH_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          port: ${{ secrets.AWS_SSH_PORT }}
          # 스크립트 중간에 실패하면 다음 스크립트를 실행하지 않는 옵션 true로 주기
          script_stop: true
          script: |
            cd /home
            sudo touch fromGithubAction.txt

      # 등록했던 인바운드 규칙을 삭제하기
      - name: Remove Github Actions IP From Security Group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
